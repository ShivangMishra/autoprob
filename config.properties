######## katago settings

katago=/opt/homebrew/bin/katago
kata.config=/opt/homebrew/Cellar/katago/1.11.0/share/katago/configs/analysis_example.cfg
#kata.model=/opt/homebrew/Cellar/katago/1.11.0/share/katago/g170e-b20c256x2-s5303129600-d1228401921.bin.gz
kata.model=/Users/adammiller/Downloads/kata1-b15c192-s1672170752-d466197061.txt.gz
kata.debugprint=false

######## search settings

# visit count for katago when searching through a game
search.visits=1200
# when a potential problem is found, this many visits to double check its properties. Typically a lot higher than search.visits
search.rootvisits=5000
# max games to find a result in directory search
search.directory.maxfinds=20

# if search requires a mistake, problems will only be considered where the original player made a big mistake in this position. The idea behind setting this true is to make sure problems are from real world positions where a human made a mistake, and thus might be a better learning opportunity. Obviously this generates way fewer problems.
search.requiremistake=false
# maxpolicy is the maximum katago policy value for a solution in order for this to be an interesting problem. Values from 0 to 1. Lower values ensure less obvious problems.
search.maxpolicy=0.6
# no more than this many correct moves to solve a problem
search.maxsolutions=1
# disallow problems where prev move was ko
search.nolastkomove=true
search.debugpassownership=true

# set turn to look only at a specific move in a specific game. The numbering is what katago would use.
#turn=207

# set forceproblem to true (only when looking at a specific move in one game) to force this to be detected as a problem
#forceproblem=true

######## problem extraction
extract.debugprintownership=true

######## problem path creation

# stop open exploring after this number of nodes (still do key paths)
paths.bailnumber=40

# when checking value of a pass, use this number of visits for establishing the base situation
paths.passvisitsbase=2000
# when checking value of a pass, use this number of visits for evaluating after a pass
paths.passvisitspass=2000

# debug ownership by printing it out
paths.debugpassownership=false
